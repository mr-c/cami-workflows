#!/usr/bin/env cwl-runner

cwlVersion: v1.0
class: CommandLineTool
baseCommand: canu
label: Uses the canu long read assembler to assemble a genome from basecalled ONT nanopore reads.

hints:
  DockerRequirement:
    dockerPull: ttubb/canu:1.8
  SoftwareRequirement:
    packages:
      canu:
        specs: [ "https://identifiers.org/RRID:SCR_015880" ]
        version: [ "1.8" ]

requirements:
  InlineJavascriptRequirement: {}

arguments:
  - valueFrom: "canu_assembly" #canu output directory
    prefix: -d
    position: 1
  - valueFrom: "canu" #assembly name prefix
    prefix: -p
    position: 2

inputs:
  genomeSize:
    label: Size estimate for sequenced genome. Can be provided as in int (e.g. 3000000) or a string (e.g. 3m).
    type: [int, string]
    inputBinding:
      position: 3
      separate: false
      prefix: genomeSize=
  reads:
    label: Basecalled ONT nanopore reads in fastq format.
    type: File
    inputBinding:
      prefix: -nanopore-raw
  stopOnLowCoverage:
    label: Canu will stop assembly if coverage is below threshold.
    type: int?
    default: 0
    inputBinding:
      position: 4
      separate: false
      prefix: stopOnLowCoverage=
  corOutCoverage:
    label: Only correct the longest reads up to this coverage.
    type: int?
    default: 40
    inputBinding:
      position: 4
      separate: false
      prefix: corOutCoverage=
  corMhapSensitivity:
    label: Read correction sensitivity level. high for coverage<30, low for coverage>60, normal for everything in between
    type: string?
    default: normal
    inputBinding:
      position: 4
      separate: false
      prefix: corMhapSensitivity=
  corMinCoverage:
    label: Limit read correction to regions with at least this minimum coverage. Split reads when coverage drops below threshold.
    type: int?
    default: 4
    inputBinding:
      position: 4
      separate: false
      prefix: corMinCoverage=
  redMemory:
    label: Memory (in GB) allocated for each job in read error detection.
    type: int?
    inputBinding:
      position: 5
      separate: false
      prefix: redMemory=
  oeaMemory:
    label: Memory (in GB) allocated for each job in overlap error adjustment.
    type: int?
    inputBinding:
      position: 5
      separate: false
      prefix: oeaMemory=
  batMemory:
    label: Memory (in GB) allocated for unitig/contig construction.
    type: int?
    inputBinding:
      position: 5
      separate: false
      prefix: batMemory=

outputs:
  output_directory:
    label: Directory containing all output generated by canu.
    type: ["null", Directory]
    outputBinding:
      glob: canu_assembly
  draft_assembly:
    label: File with contigs assembled from nanopore reads.
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.contigs.fasta
  contigs_read_layout:
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.contigs.layout
  contigs_graph:
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.contigs.gfa
  unassembled:
    label: Singleton reads / isolated contigs.
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.unassembled.fasta
  unitigs:
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.unitigs.fasta
  unitigs_read_layout:
    type: File
    outputBinding:
      glob: canu_assembly/canu.unitigs.layout
  unitigs_graph:
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.unitigs.gfa
  report:
    type: ["null", File]
    outputBinding:
      glob: canu_assembly/canu.report
    
s:author:
  - class: s:Person
    s:email: mailto:tom.tubb@googlemail.com
    s:name: Tom Tubbesing
s:dateCreated: "2019-03-28"
s:license: "https://spdx.org/licenses/GPL-3.0-or-later.html"

$namespaces:
  s: "http://schema.org/"

$schemas:
  - http://schema.org/docs/schema_org_rdfa.html
